package com.RestFulAPI.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.data.mongodb.core.aggregation.BooleanOperators.And;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
public class SpringSecurity extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userDetailsService;

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http
				// üîí CSRF (Cross-Site Request Forgery) ‡§ï‡•ã disable ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§π‡§Æ REST API
				// ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
				.csrf().disable()

				// üåê URL access control: ‡§ï‡§ø‡§∏ URL ‡§ï‡•ã secure ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç
				.authorizeRequests()
				// üîê "/journal/**" ‡§µ‡§æ‡§≤‡§æ ‡§π‡§∞ URL authenticated (login ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•Å‡§Ü) user ‡§π‡•Ä access ‡§ï‡§∞
				// ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
				.antMatchers("/journal/**", "/user/**").authenticated()
				.antMatchers("/admin/**").hasRole("ADMIN")

				// üåç ‡§¨‡§æ‡§ï‡•Ä ‡§∏‡§≠‡•Ä URL (‡§ú‡•à‡§∏‡•á "/", "/home", etc.) ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ login ‡§ï‡•á access ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ
				// ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
				.anyRequest().permitAll()

				// üîë Basic Authentication enable ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (Browser popup ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è
				// username/password ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§ó‡§æ)
				.and().httpBasic()

				// üö´ Session stateless ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‚Äî ‡§π‡§∞ request ‡§Æ‡•á‡§Ç authentication ‡§ï‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã‡§ó‡•Ä
				// (JWT ‡§Ø‡§æ Basic Auth)
				.and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
		
		/*
		http
		.csrf().disable()
		.authorizeRequests()
		.anyRequest().permitAll(); // üîì sab endpoints public*/
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}

	@Bean
	public PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();

	}

}
