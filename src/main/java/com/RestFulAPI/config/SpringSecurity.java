package com.RestFulAPI.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import JwtFilter.JwtFilter;

@EnableWebSecurity

public class SpringSecurity extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userDetailsService;
	
	@Autowired
	@Lazy
    private JwtFilter jwtFilter;

	@Override 
	protected void configure(HttpSecurity http) throws Exception {

		http
				// üîí CSRF (Cross-Site Request Forgery) ‡§ï‡•ã disable ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§π‡§Æ REST API
				// ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
				.csrf().disable()

				// üåê URL access control: ‡§ï‡§ø‡§∏ URL ‡§ï‡•ã secure ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡§ø‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç
				.authorizeRequests()
				// üîê "/journal/**" ‡§µ‡§æ‡§≤‡§æ ‡§π‡§∞ URL authenticated (login ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•Å‡§Ü) user ‡§π‡•Ä access ‡§ï‡§∞
				// ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
				.antMatchers("/journal/**", "/user/**").authenticated().antMatchers("/admin/**").hasRole("ADMIN")

				// üåç ‡§¨‡§æ‡§ï‡•Ä ‡§∏‡§≠‡•Ä URL (‡§ú‡•à‡§∏‡•á "/", "/home", etc.) ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ login ‡§ï‡•á access ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ
				// ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
				.anyRequest().permitAll();
				http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().csrf().disable();
				http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
	
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}

	@Bean
	public PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();

	}
	
	
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception
	{
		return super.authenticationManagerBean();
		
	}
	

	@Bean
    public JwtFilter jwtFilter() {
        return new JwtFilter();
    }
	
	
	
	

}
